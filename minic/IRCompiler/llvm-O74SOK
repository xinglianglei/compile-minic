@map = global [10 x [10 x i32]] zeroinitializer, align 16
@indegree = global [10 x i32] zeroinitializer, align 16
@queue = global [10 x i32] zeroinitializer, align 16
define void @topo(i32 %t0) {
.L20:
	%l1 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%l4 = alloca i32, align 4
	%l5 = alloca i32, align 4
	store i32 %t0, i32* %l1, align 4
	store i32 0, i32* %l2, align 4
	store i32 0, i32* %l3, align 4
	store i32 1, i32* %l4, align 4
	store i32 1, i32* %l5, align 4
	br label %.L2
.L2:
	%t6 = load i32, i32* %l4, align 4
	%t7 = load i32, i32* %l1, align 4
	%t8 = icmp sle i32 %t6, %t7
	br i1 %t8, label %.L3, label %.L4
.L3:
	store i32 1, i32* %l5, align 4
	br label %.L5
.L5:
	%t9 = load i32, i32* %l5, align 4
	%t10 = load i32, i32* %l1, align 4
	%t11 = icmp sle i32 %t9, %t10
	br i1 %t11, label %.L6, label %.L7
.L6:
	%t12 = load i32, i32* %l5, align 4
	%t13 = mul nsw i32 %t12, 4
	%t61 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t62 = bitcast i32* %t61 to i8*
	%t64 = sext i32 %t13 to i64
	%t63 = getelementptr inbounds i8, i8* %t62, i64 %t64
	%t14 = bitcast i8* %t63 to i32*
	%t16 = load i32, i32* %t14, align 4
	%t15 = icmp eq i32 %t16, 0
	br i1 %t15, label %.L8, label %.L10
.L8:
	%t17 = load i32, i32* %l5, align 4
	store i32 %t17, i32* %l2, align 4
	br label %.L7
.L10:
	%t18 = load i32, i32* %l5, align 4
	%t19 = add nsw i32 %t18, 1
	store i32 %t19, i32* %l5, align 4
	br label %.L5
.L7:
	%t20 = load i32, i32* %l2, align 4
	%t21 = load i32, i32* %l3, align 4
	%t22 = mul nsw i32 %t21, 4
	%t65 = getelementptr inbounds [10 x i32], [10 x i32]* @queue, i64 0, i64 0
	%t66 = bitcast i32* %t65 to i8*
	%t68 = sext i32 %t22 to i64
	%t67 = getelementptr inbounds i8, i8* %t66, i64 %t68
	%t23 = bitcast i8* %t67 to i32*
	store i32 %t20, i32* %t23, align 4
	%t24 = load i32, i32* %l3, align 4
	%t25 = add nsw i32 %t24, 1
	store i32 %t25, i32* %l3, align 4
	%t26 = sub nsw i32 0, 1
	%t27 = load i32, i32* %l2, align 4
	%t28 = mul nsw i32 %t27, 4
	%t69 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t70 = bitcast i32* %t69 to i8*
	%t72 = sext i32 %t28 to i64
	%t71 = getelementptr inbounds i8, i8* %t70, i64 %t72
	%t29 = bitcast i8* %t71 to i32*
	store i32 %t26, i32* %t29, align 4
	store i32 1, i32* %l5, align 4
	br label %.L11
.L11:
	%t30 = load i32, i32* %l5, align 4
	%t31 = load i32, i32* %l1, align 4
	%t32 = icmp sle i32 %t30, %t31
	br i1 %t32, label %.L12, label %.L13
.L12:
	%t33 = load i32, i32* %l2, align 4
	%t34 = load i32, i32* %l5, align 4
	%t35 = mul nsw i32 %t33, 10
	%t36 = add nsw i32 %t35, %t34
	%t37 = mul nsw i32 %t36, 4
	%t73 = getelementptr inbounds [10 x [10 x i32]], [10 x [10 x i32]]* @map, i64 0, i64 0, i64 0
	%t74 = bitcast i32* %t73 to i8*
	%t76 = sext i32 %t37 to i64
	%t75 = getelementptr inbounds i8, i8* %t74, i64 %t76
	%t38 = bitcast i8* %t75 to i32*
	%t39 = load i32, i32* %t38, align 4
	%t77 = icmp ne i32 %t39, 0
	br i1 %t77, label %.L14, label %.L16
.L14:
	%t40 = load i32, i32* %l5, align 4
	%t41 = mul nsw i32 %t40, 4
	%t78 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t79 = bitcast i32* %t78 to i8*
	%t81 = sext i32 %t41 to i64
	%t80 = getelementptr inbounds i8, i8* %t79, i64 %t81
	%t42 = bitcast i8* %t80 to i32*
	%t44 = load i32, i32* %t42, align 4
	%t43 = sub nsw i32 %t44, 1
	%t45 = load i32, i32* %l5, align 4
	%t46 = mul nsw i32 %t45, 4
	%t82 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t83 = bitcast i32* %t82 to i8*
	%t85 = sext i32 %t46 to i64
	%t84 = getelementptr inbounds i8, i8* %t83, i64 %t85
	%t47 = bitcast i8* %t84 to i32*
	store i32 %t43, i32* %t47, align 4
	br label %.L16
.L16:
	%t48 = load i32, i32* %l5, align 4
	%t49 = add nsw i32 %t48, 1
	store i32 %t49, i32* %l5, align 4
	br label %.L11
.L13:
	%t50 = load i32, i32* %l4, align 4
	%t51 = add nsw i32 %t50, 1
	store i32 %t51, i32* %l4, align 4
	br label %.L2
.L4:
	store i32 0, i32* %l4, align 4
	br label %.L17
.L17:
	%t52 = load i32, i32* %l4, align 4
	%t53 = load i32, i32* %l1, align 4
	%t54 = icmp slt i32 %t52, %t53
	br i1 %t54, label %.L18, label %.L1
.L18:
	%t55 = load i32, i32* %l4, align 4
	%t56 = mul nsw i32 %t55, 4
	%t86 = getelementptr inbounds [10 x i32], [10 x i32]* @queue, i64 0, i64 0
	%t87 = bitcast i32* %t86 to i8*
	%t89 = sext i32 %t56 to i64
	%t88 = getelementptr inbounds i8, i8* %t87, i64 %t89
	%t57 = bitcast i8* %t88 to i32*
	%t58 = load i32, i32* %t57, align 4
	call void @putint(i32 %t58)
	call void @putch(i32 10)
	%t59 = load i32, i32* %l4, align 4
	%t60 = add nsw i32 %t59, 1
	store i32 %t60, i32* %l4, align 4
	br label %.L17
.L1:
	ret void
}
define i32 @main() {
.L8:
	%l0 = alloca i32, align 4
	%l1 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	store i32 1, i32* %l3, align 4
	store i32 5, i32* %l1, align 4
	br label %.L2
.L2:
	%t4 = load i32, i32* %l3, align 4
	%t5 = load i32, i32* %l1, align 4
	%t6 = icmp sle i32 %t4, %t5
	br i1 %t6, label %.L3, label %.L4
.L3:
	%t7 = call i32 (...) @getint()
	store i32 %t7, i32* %l2, align 4
	br label %.L5
.L5:
	%t8 = load i32, i32* %l2, align 4
	%t9 = icmp ne i32 %t8, 0
	br i1 %t9, label %.L6, label %.L7
.L6:
	%t10 = load i32, i32* %l3, align 4
	%t11 = load i32, i32* %l2, align 4
	%t12 = mul nsw i32 %t10, 10
	%t13 = add nsw i32 %t12, %t11
	%t14 = mul nsw i32 %t13, 4
	%t28 = getelementptr inbounds [10 x [10 x i32]], [10 x [10 x i32]]* @map, i64 0, i64 0, i64 0
	%t29 = bitcast i32* %t28 to i8*
	%t31 = sext i32 %t14 to i64
	%t30 = getelementptr inbounds i8, i8* %t29, i64 %t31
	%t15 = bitcast i8* %t30 to i32*
	store i32 1, i32* %t15, align 4
	%t16 = load i32, i32* %l2, align 4
	%t17 = mul nsw i32 %t16, 4
	%t32 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t33 = bitcast i32* %t32 to i8*
	%t35 = sext i32 %t17 to i64
	%t34 = getelementptr inbounds i8, i8* %t33, i64 %t35
	%t18 = bitcast i8* %t34 to i32*
	%t20 = load i32, i32* %t18, align 4
	%t19 = add nsw i32 %t20, 1
	%t21 = load i32, i32* %l2, align 4
	%t22 = mul nsw i32 %t21, 4
	%t36 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t37 = bitcast i32* %t36 to i8*
	%t39 = sext i32 %t22 to i64
	%t38 = getelementptr inbounds i8, i8* %t37, i64 %t39
	%t23 = bitcast i8* %t38 to i32*
	store i32 %t19, i32* %t23, align 4
	%t24 = call i32 (...) @getint()
	store i32 %t24, i32* %l2, align 4
	br label %.L5
.L7:
	%t25 = load i32, i32* %l3, align 4
	%t26 = add nsw i32 %t25, 1
	store i32 %t26, i32* %l3, align 4
	br label %.L2
.L4:
	%t27 = load i32, i32* %l1, align 4
	call void @topo(i32 %t27)
	store i32 0, i32* %l0, align 4
	%t40 = load i32, i32* %l0, align 4
	ret i32 %t40
}
declare i32 @getint(...);
declare i32 @getch(...);
declare void @putint(i32);
declare void @putch(i32);
declare void @putstr(i8*);
declare i32 @getarray(i32*);
declare void @putarray(i32, i32*);
