declare int@deepWhileBr(i32 %t0,i32 %t1) {
	declare i32 %l2 
	declare i32 %l3 
	declare i32 %l4 
	declare i32 %l5 ;c
	declare i32 %l11 ;d
	declare i32 %l19 ;e
	declare i32 %t6 
	declare i32 %t7 
	declare i32 %t8 
	declare i32 %t9 
	declare i1 %t10 
	declare i32 %t12 
	declare i1 %t13 
	declare i32 %t14 
	declare i32 %t15 
	declare i32 %t16 
	declare i32 %t17 
	declare i1 %t18 
	declare i32 %t20 
	declare i32 %t21 
	declare i1 %t22 
	declare i32 %t23 
	declare i32 %t24 
	declare i32 %t25 
	%l2=t0
	%l3=t1
	entry
	%t6=%l2
	%t7=%l3
	%t8 = add %t6, %t7
	%l5=%t8
	br Label.L2
.L2:
	%t9=%l5
	%t10=cmp LT %t9, 75
	bc %t10,label.L3,label.L4
.L3:
	%l11=42
	%t12=%l5
	%t13=cmp LT %t12, 100
	bc %t13,label.L5,label.L7
.L5:
	%t14=%l5
	%t15=%l11
	%t16 = add %t14, %t15
	%l5=%t16
	%t17=%l5
	%t18=cmp GT %t17, 99
	bc %t18,label.L8,label.L10
.L8:
	%t20=%l11
	%t21 = mul %t20, 2
	%l19=%t21
	%t22 = eq 1, 1
	bc %t22,label.L11,label.L13
.L11:
	%t23=%l19
	%t24 = mul %t23, 2
	%l5=%t24
	br Label.L13
.L13:
	br Label.L10
.L10:
	br Label.L7
.L7:
	br Label.L2
.L4:
	%t25=%l5
	%l0=%t25
	br Label.L1
.L1:
	exit %l4
}

declare int@main() {
	declare i32 %l0 
	declare i32 %l1 ;p
	declare i32 %t2 
	declare i32 %t3 
	declare i32 %t4 
	entry
	%l1=2
	%t2=%l1
	%t3=%l1
	%t4=call i32 @deepWhileBr(i32 %t2, i32 %t3);
	%l0=%t4
	br Label.L1
.L1:
	exit %l0
}

