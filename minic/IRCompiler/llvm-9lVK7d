@map = global [10 x [10 x i32]] zeroinitializer, align 16
@indegree = global [10 x i32] zeroinitializer, align 16
@queue = global [10 x i32] zeroinitializer, align 16
define void @topo(i32 %t0) {
.L20:
	%l1 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%l4 = alloca i32, align 4
	%l5 = alloca i32, align 4
	store i32 %t0, i32* %l1, align 4
	store i32 0, i32* %l2, align 4
	store i32 0, i32* %l3, align 4
	store i32 1, i32* %l4, align 4
	store i32 1, i32* %l5, align 4
	br label %.L3
.L3:
	%t6 = load i32, i32* %l4, align 4
	%t7 = load i32, i32* %l1, align 4
	%t8 = icmp sle i32 %t6, %t7
	br i1 %t8, label %.L4, label %.L5
.L4:
	store i32 1, i32* %l5, align 4
	br label %.L6
.L6:
	%t9 = load i32, i32* %l5, align 4
	%t10 = load i32, i32* %l1, align 4
	%t11 = icmp sle i32 %t9, %t10
	br i1 %t11, label %.L7, label %.L8
.L7:
	%t58 = load i32, i32* %l5, align 4
	%t12 = mul nsw i32 %t58, 4
	%t59 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t60 = bitcast i32* %t59 to i8*
	%t62 = sext i32 %t12 to i64
	%t61 = getelementptr inbounds i8, i8* %t60, i64 %t62
	%t13 = bitcast i8* %t61 to i32*
	%t15 = load i32, i32* %t13, align 4
	%t16 = icmp eq i32 %t15, 0
	br i1 %t16, label %.L9, label %.L11
.L9:
	%t63 = load i32, i32* %l5, align 4
	store i32 %t63, i32* %l2, align 4
	br label %.L8
.L11:
	%t17 = load i32, i32* %l5, align 4
	%t18 = add nsw i32 %t17, 1
	store i32 %t18, i32* %l5, align 4
	br label %.L6
.L8:
	%t64 = load i32, i32* %l3, align 4
	%t19 = mul nsw i32 %t64, 4
	%t65 = getelementptr inbounds [10 x i32], [10 x i32]* @queue, i64 0, i64 0
	%t66 = bitcast i32* %t65 to i8*
	%t68 = sext i32 %t19 to i64
	%t67 = getelementptr inbounds i8, i8* %t66, i64 %t68
	%t20 = bitcast i8* %t67 to i32*
	%t69 = load i32, i32* %l2, align 4
	store i32 %t69, i32* %t20, align 4
	%t22 = load i32, i32* %l3, align 4
	%t23 = add nsw i32 %t22, 1
	store i32 %t23, i32* %l3, align 4
	%t70 = load i32, i32* %l2, align 4
	%t24 = mul nsw i32 %t70, 4
	%t71 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t72 = bitcast i32* %t71 to i8*
	%t74 = sext i32 %t24 to i64
	%t73 = getelementptr inbounds i8, i8* %t72, i64 %t74
	%t25 = bitcast i8* %t73 to i32*
	store i32 -1, i32* %t25, align 4
	store i32 1, i32* %l5, align 4
	br label %.L12
.L12:
	%t27 = load i32, i32* %l5, align 4
	%t28 = load i32, i32* %l1, align 4
	%t29 = icmp sle i32 %t27, %t28
	br i1 %t29, label %.L13, label %.L14
.L13:
	%t75 = load i32, i32* %l2, align 4
	%t30 = mul nsw i32 %t75, 10
	%t76 = load i32, i32* %l5, align 4
	%t31 = add nsw i32 %t30, %t76
	%t32 = mul nsw i32 %t31, 4
	%t77 = getelementptr inbounds [10 x [10 x i32]], [10 x [10 x i32]]* @map, i64 0, i64 0, i64 0
	%t78 = bitcast i32* %t77 to i8*
	%t80 = sext i32 %t32 to i64
	%t79 = getelementptr inbounds i8, i8* %t78, i64 %t80
	%t33 = bitcast i8* %t79 to i32*
	%t35 = load i32, i32* %t33, align 4
	%t36 = icmp ne i32 %t35, 0
	br i1 %t36, label %.L15, label %.L17
.L15:
	%t81 = load i32, i32* %l5, align 4
	%t37 = mul nsw i32 %t81, 4
	%t82 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t83 = bitcast i32* %t82 to i8*
	%t85 = sext i32 %t37 to i64
	%t84 = getelementptr inbounds i8, i8* %t83, i64 %t85
	%t38 = bitcast i8* %t84 to i32*
	%t86 = load i32, i32* %l5, align 4
	%t40 = mul nsw i32 %t86, 4
	%t87 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t88 = bitcast i32* %t87 to i8*
	%t90 = sext i32 %t40 to i64
	%t89 = getelementptr inbounds i8, i8* %t88, i64 %t90
	%t41 = bitcast i8* %t89 to i32*
	%t43 = load i32, i32* %t41, align 4
	%t44 = sub nsw i32 %t43, 1
	store i32 %t44, i32* %t38, align 4
	br label %.L17
.L17:
	%t45 = load i32, i32* %l5, align 4
	%t46 = add nsw i32 %t45, 1
	store i32 %t46, i32* %l5, align 4
	br label %.L12
.L14:
	%t47 = load i32, i32* %l4, align 4
	%t48 = add nsw i32 %t47, 1
	store i32 %t48, i32* %l4, align 4
	br label %.L3
.L5:
	store i32 0, i32* %l4, align 4
	br label %.L18
.L18:
	%t49 = load i32, i32* %l4, align 4
	%t50 = load i32, i32* %l1, align 4
	%t51 = icmp slt i32 %t49, %t50
	br i1 %t51, label %.L19, label %.L2
.L19:
	%t91 = load i32, i32* %l4, align 4
	%t52 = mul nsw i32 %t91, 4
	%t92 = getelementptr inbounds [10 x i32], [10 x i32]* @queue, i64 0, i64 0
	%t93 = bitcast i32* %t92 to i8*
	%t95 = sext i32 %t52 to i64
	%t94 = getelementptr inbounds i8, i8* %t93, i64 %t95
	%t53 = bitcast i8* %t94 to i32*
	%t55 = load i32, i32* %t53, align 4
	call void @putint(i32 %t55)
	call void @putch(i32 10)
	%t56 = load i32, i32* %l4, align 4
	%t57 = add nsw i32 %t56, 1
	store i32 %t57, i32* %l4, align 4
	br label %.L18
.L2:
	ret void
}
define i32 @main() {
.L9:
	%l0 = alloca i32, align 4
	%l1 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	store i32 1, i32* %l3, align 4
	store i32 5, i32* %l1, align 4
	br label %.L3
.L3:
	%t4 = load i32, i32* %l3, align 4
	%t5 = load i32, i32* %l1, align 4
	%t6 = icmp sle i32 %t4, %t5
	br i1 %t6, label %.L4, label %.L5
.L4:
	%t7 = call i32 (...) @getint()
	store i32 %t7, i32* %l2, align 4
	br label %.L6
.L6:
	%t8 = load i32, i32* %l2, align 4
	%t9 = icmp ne i32 %t8, 0
	br i1 %t9, label %.L7, label %.L8
.L7:
	%t28 = load i32, i32* %l3, align 4
	%t10 = mul nsw i32 %t28, 10
	%t29 = load i32, i32* %l2, align 4
	%t11 = add nsw i32 %t10, %t29
	%t12 = mul nsw i32 %t11, 4
	%t30 = getelementptr inbounds [10 x [10 x i32]], [10 x [10 x i32]]* @map, i64 0, i64 0, i64 0
	%t31 = bitcast i32* %t30 to i8*
	%t33 = sext i32 %t12 to i64
	%t32 = getelementptr inbounds i8, i8* %t31, i64 %t33
	%t13 = bitcast i8* %t32 to i32*
	store i32 1, i32* %t13, align 4
	%t34 = load i32, i32* %l2, align 4
	%t15 = mul nsw i32 %t34, 4
	%t35 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t36 = bitcast i32* %t35 to i8*
	%t38 = sext i32 %t15 to i64
	%t37 = getelementptr inbounds i8, i8* %t36, i64 %t38
	%t16 = bitcast i8* %t37 to i32*
	%t39 = load i32, i32* %l2, align 4
	%t18 = mul nsw i32 %t39, 4
	%t40 = getelementptr inbounds [10 x i32], [10 x i32]* @indegree, i64 0, i64 0
	%t41 = bitcast i32* %t40 to i8*
	%t43 = sext i32 %t18 to i64
	%t42 = getelementptr inbounds i8, i8* %t41, i64 %t43
	%t19 = bitcast i8* %t42 to i32*
	%t21 = load i32, i32* %t19, align 4
	%t22 = add nsw i32 %t21, 1
	store i32 %t22, i32* %t16, align 4
	%t23 = call i32 (...) @getint()
	store i32 %t23, i32* %l2, align 4
	br label %.L6
.L8:
	%t24 = load i32, i32* %l3, align 4
	%t25 = add nsw i32 %t24, 1
	store i32 %t25, i32* %l3, align 4
	br label %.L3
.L5:
	%t26 = load i32, i32* %l1, align 4
	call void @topo(i32 %t26)
	store i32 0, i32* %l0, align 4
	%t27 = load i32, i32* %l0, align 4
	ret i32 %t27
}
declare i32 @getint(...);
declare i32 @getch(...);
declare void @putint(i32);
declare void @putch(i32);
declare void @putstr(i8*);
declare i32 @getarray(i32*);
declare void @putarray(i32, i32*);
